<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<title>PrimaryAccess MP3</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<style>
		 body { 			font-family: Verdana,Geneva,sans-serif; font-size: 13px;  
							padding: 0; margin:0px;;background-color:#eee;
							}
		.pa-main {			text-align:center; margin-left:auto; margin-right:auto;
							}
		.pa-bs {			display: inline-block; border-radius: 10px; padding-left: 8px; padding-right: 8px; background-color:#aaa; color: #fff;
							border: 1px solid #999; font-size: 12px; height: 16px; cursor: pointer; width: 50px; text-align:center;
							}
</style>	
</head>
<body>
	<div id="mainDiv" class="pa-main">
		<canvas id="visualizer" width="300" height="50"></canvas><br><p><p> 
		<div id='recordBut' class='pa-bs' onclick="startRecording(this);">Record</div>&nbsp;&nbsp;
		<div id='pauseBut'	class='pa-bs' onclick="pauseRecording(this);">Pause</div>&nbsp;&nbsp;
		<div class='pa-bs' onclick="stopRecording(this);" >Stop</div></p> 
		<div id="playerDiv" class="pa-player"></div>
	</div>



<script>


// http://audior.ec/blog/recording-mp3-using-only-html5-and-javascript-recordmp3-js/
// https://github.com/Audior/Recordmp3js

  var audio_context;
  var recorder;
  var recording=false;
 
  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    recorder=new Recorder(input, { numChannels: 1 });
    FrequencyBars(input);
  }

  function startRecording(button) {
    
	if (recorder) {
		recording=true;
		setTimeout(recorder.record,500);
		$("#playerDiv").html("<span style='color:red;font-weight:bold'>-- Recording --</span>");
		}
  }

 function pauseRecording(button) {
	if (!recording)	return;
    recorder && recorder.stop();
	$("#playerDiv").html("<span style='color:#666;font-weight:bold'><i>Recording paused</i></span>");
 }

  function stopRecording(button) {
	if (!recording)	return;
	recording=false;	
	recorder && recorder.stop();
	$("#playerDiv").html("<span style='color:#009900;font-weight:bold'>Making MP3 </span><br>(Takes a while - about 3x record time)");
	LoadingIcon(true,32,"mainDiv");
	recorder && recorder.exportWAV(function(blob) {});    
    recorder.clear();
  }

  window.onload = function init() {
    try {
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = ( navigator.getUserMedia ||
                       navigator.webkitGetUserMedia ||
                       navigator.mozGetUserMedia ||
                       navigator.msGetUserMedia);
      window.URL = window.URL || window.webkitURL;

      audio_context = new AudioContext;
       console.log('Audio recording ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }

    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      console.log('No live audio input: ' + e);
    });
  };

function FrequencyBars(input)
{
	var analyser=audio_context.createAnalyser();
	analyser.minDecibels=-90;	analyser.maxDecibels=-10;
	analyser.fftSize=256;		analyser.smoothingTimeConstant=0.85;
	input.connect(analyser);
	var canvas=$("#visualizer")[0];
	var canvasCtx=canvas.getContext("2d");
	var w=canvas.width+4;
  	var h=canvas.height;
    var bufferLength=analyser.frequencyBinCount/3;
    var dataArray=new Uint8Array(bufferLength);
    var barWidth=w/bufferLength;

	var draw=function() {
		var barHeight,i,x=0;
		drawVisual=requestAnimationFrame(draw);
      	analyser.getByteFrequencyData(dataArray);
      	canvasCtx.fillStyle='rgb(238,238,238)';
      	canvasCtx.fillRect(0,0,w,h);
		  for (i=0;i<bufferLength;i++) {
       		barHeight=dataArray[i]/4;
        	canvasCtx.fillStyle='rgb(180,180,180)';
        	canvasCtx.fillRect(x,h-barHeight,barWidth,barHeight);
			canvasCtx.fillRect(0,h-1,w-6,h);
    	  	x+=barWidth+2;
     		}
    	};

 	draw();
}

function LoadingIcon(mode, size, container)								// SHOW/HIDE LOADING ICON		
{
	container=container ? "#"+container: "#bodyDiv";						// If no container spec'd, use dialog
	if (!mode) {															// If hiding
		$("#sf-loadingIcon").remove();										// Remove it
		return;																// Quit
		}
	var str="<img src='img/loading.gif' width='"+size+"' ";					// Img
	str+="id='sf-loadingIcon' style='position:absolute;top:8px;left:calc(50% - "+size/2+"px);z-index:5000'>";	
	$(container).append(str);														// Add icon to container
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
// MP3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

(function(window){

var WORKER_PATH = 'lib/recorderWorker.js';
var encoderWorker = new Worker('lib/mp3Worker.js');

var Recorder = function(source, cfg){
  var config = cfg || {};
  var bufferLen = config.bufferLen || 4096;
  var numChannels = config.numChannels || 2;
  this.context = source.context;
  this.node = (this.context.createScriptProcessor ||
			   this.context.createJavaScriptNode).call(this.context,
			   bufferLen, numChannels, numChannels);
  var worker = new Worker(config.workerPath || WORKER_PATH);
  worker.postMessage({
	command: 'init',
	config: {
	  sampleRate: this.context.sampleRate,
	  numChannels: numChannels
	}
  });
  var recording = false,
	currCallback;

  this.node.onaudioprocess = function(e){
	if (!recording) return;
	var buffer = [];
	for (var channel = 0; channel < numChannels; channel++){
		buffer.push(e.inputBuffer.getChannelData(channel));
	}
	worker.postMessage({
	  command: 'record',
	  buffer: buffer
	});
  }

  this.configure = function(cfg){
	for (var prop in cfg){
	  if (cfg.hasOwnProperty(prop)){
		config[prop] = cfg[prop];
	  }
	}
  }

  this.record = function(){
	recording = true;
  }

  this.stop = function(){
	recording = false;
  }

  this.clear = function(){
	worker.postMessage({ command: 'clear' });
  }

  this.getBuffer = function(cb) {
	currCallback = cb || config.callback;
	worker.postMessage({ command: 'getBuffer' })
  }

  this.exportWAV = function(cb, type){
	currCallback = cb || config.callback;
	type = type || config.type || 'audio/wav';
	if (!currCallback) throw new Error('Callback not set');
	worker.postMessage({
	  command: 'exportWAV',
	  type: type
	});
  }

  //Mp3 conversion
 
  worker.onmessage = function(e){
	var blob = e.data;
	var arrayBuffer;
	var fileReader = new FileReader();

	fileReader.onload = function(){
	  arrayBuffer = this.result;
	  var buffer = new Uint8Array(arrayBuffer),
	  data = parseWav(buffer);
	  encoderWorker.postMessage({ cmd: 'init', config:{
		  mode : 3,
		  channels:1,
		  samplerate: data.sampleRate,
		  bitrate: data.bitsPerSample
	  }});

	  encoderWorker.postMessage({ cmd: 'encode', buf: Uint8ArrayToFloat32Array(data.samples) });
	  encoderWorker.postMessage({ cmd: 'finish'});
	  encoderWorker.onmessage = function(e) {
		  if (e.data.cmd == 'data') {
			LoadingIcon();
			var url='data:audio/mp3;base64,'+encode64(e.data.buf);
			var au=document.createElement('audio');
			au.controls=true;
			au.src=url;
			$("#playerDiv").html(au);
			var hf=document.createElement('a');
			hf.href=url;
			hf.download="audio.mp3";
			hf.innerHTML="Save MP3 file";
			$("#playerDiv").append("<br>");
			$("#playerDiv").append(hf);
		  	}
	  };
	};

	fileReader.readAsArrayBuffer(blob);
	currCallback(blob);
  }

  function encode64(buffer) {
	  var binary = '',
		  bytes = new Uint8Array( buffer ),
		  len = bytes.byteLength;

	  for (var i = 0; i < len; i++) {
		  binary += String.fromCharCode( bytes[ i ] );
	  }
	  return window.btoa( binary );
  }

  function parseWav(wav) {
	  function readInt(i, bytes) {
		  var ret = 0,
			  shft = 0;

		  while (bytes) {
			  ret += wav[i] << shft;
			  shft += 8;
			  i++;
			  bytes--;
		  }
		  return ret;
	  }
	  if (readInt(20, 2) != 1) throw 'Invalid compression code, not PCM';
	  if (readInt(22, 2) != 1) throw 'Invalid number of channels, not 1';
	  return {
		  sampleRate: readInt(24, 4),
		  bitsPerSample: readInt(34, 2),
		  samples: wav.subarray(44)
	  };
  }

  function Uint8ArrayToFloat32Array(u8a){
	  var f32Buffer = new Float32Array(u8a.length);
	  for (var i = 0; i < u8a.length; i++) {
		  var value = u8a[i<<1] + (u8a[(i<<1)+1]<<8);
		  if (value >= 0x8000) value |= ~0x7FFF;
		  f32Buffer[i] = value / 0x8000;
	  }
	  return f32Buffer;
  }

  source.connect(this.node);
  this.node.connect(this.context.destination);    //this should not be necessary
};
window.Recorder = Recorder;
})(window);


 </script>
</body>
</html>